Cyrus
 - 10/31: research on STFT and transcription of music, Klapuri paper (2 hrs)
 - 11/2: STFT implemenation in C++ (3 hours)
 - 11/4: meeting with Dr. Harley, formulation of DSP plan, structure (3 hrs)
 - 11/7: STFT in Python (2 hours)
 - 11/10: reading wav files, creating STFT colormap graphs (2 hours)
 - 11/13: transcribe STFT max frequencies into notes (10 hours)
 - 11/10-11/15: testing STFT max frequency implementation (10 hours)
 - 11/21: create separate STFT chirp example (1 hour)
 - 11/28: working with more wav files, tuning implementation (2 hours)

Riddhi
 - 10/2: Researched different GUI libraries/frameworks and languages to use. Started off looking at
		C++ Qt.
		(5 hrs)
 - 10/5: Read and watched videos about Qt and setting up a project: https://doc.qt.io/
		 Started setting up the project in Qt before realizing the complexity and requirements
		 were too much for our project.
		 (7 hrs)
 - 10/15: Conducted further research on GUIs and talked with the team to decide that Python would be the
		  best language to work with. Narrowed down frameworks to Python and decided on using Tkinter.
		  (3 hrs)
 - 10/20-22: Read through Tkinter documents: https://docs.python.org/3/library/tkinter.html
		     and watched a video on initializing a Tkinter project: https://www.youtube.com/watch?v=YXPyB4XeYLA&t=117s
			 (7 hrs)
 - 11/2: Created GitHub repo and initialized the main GUI. Worked on being able to play a wav file
			(2 hrs)
 - 11/16: Add functionality to access user's file explorer and select a sound file. Created buttons to then play/pause
		this sound file.
			(3 hrs)
 - 11/21: Organize GUI into three different sections: Original Song, Strum Pattern, and Metronome. Added buttons for displaying
		strum patterns, but the actual functionality is a stretch goal for next semester. Added a button to show the Fourier Transform
		graph of the file passed in from the file explorer.
			(3 hrs)
 - 11/28: Added a button to display the notes of the song the user selects. Transformed hard-coded code to be generic and allow for user's
		input to be worked with. Added some aesthetic changes and assisted with metronome testing.
			(5 hrs)
		  Worked on report.
		  	(2 hrs)

Kendall
 - 11/1 & 11/2: researched serial communication and made program in 
              and made a program in CircuitPython to be able to 
              read and write to a file. 
	      (7 hrs)
 - 11/15 & 11/16: researched MIDI to find out if notes can easily be read in it 
		(4 hrs)
 - 11/17: researched MIDI to see how to write a MIDI file and if the bpm could
         be found in the file easily. researched CircuitPython libraries to 
	 see if they could be used to read and write MIDI files 
	 (4 hrs)
 - 11/18: researched libraries to calculate the BPM from a song. uninstalled and 
         reinstalled python a ton because it would not work with installing
         new libraries anymore. found the library aubio to calculate the bpm of a song. 
	 worked with different examples of aubio to figure out how to use it. 
	 (5 hrs)
 - 11/19: researched the Pico hardware to find out if a speaker could be used with it.
         bought a speaker for the Pico. Started to send data serially to 
         the Pico. Figured out what format data had to be in for the Pico to understand
	 it. 
	 (5 hrs)
 - 11/20: got a piezo because the Pico does not have a DAC so I could not use a 
         speaker. Wired up the piezo and used an example to see if it worked. 
	 made the commands to work with the Pico to set, start, and stop the 
         piezo. made the metronome class to abstract the serial commands for the Pico away
         from the GUI.
	 (8 hrs)
 - 11/21: updated and tested the metronome class.
	 (1 hr)
 - 11/27: wrote the prior art section of the report. 
	 (1 hr)
 - 11/28: integrated the metronome into the GUI. created a popup window in the GUI to
	 get the port. wrote all the parts of the report that had to do with the 
         metronome and wrote my part of Empirical Evidence. 
	 (6 hrs)
         