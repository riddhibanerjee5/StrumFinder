Cyrus
 - 10/31: research on STFT and transcription of music, Klapuri paper (2 hrs)
 - 11/2: STFT implemenation in C++ (3 hours)
 - 11/4: meeting with Dr. Harley, formulation of DSP plan, structure (3 hrs)
 - 11/7: STFT in Python (2 hours)
 - 11/10: reading wav files, creating STFT colormap graphs (2 hours)
 - 11/13: transcribe STFT max frequencies into notes (10 hours)
 - 11/10-11/15: testing STFT max frequency implementation (10 hours)
 - 11/21: create separate STFT chirp example (1 hour)
 - 11/28: working with more wav files, tuning implementation (2 hours)

Riddhi
 - 10/2: Researched different GUI libraries/frameworks and languages to use. Started off looking at
		C++ Qt.
		(5 hrs)
 - 10/5: Read and watched videos about Qt and setting up a project: https://doc.qt.io/
		 Started setting up the project in Qt before realizing the complexity and requirements
		 were too much for our project.
		 (7 hrs)
 - 10/15: Conducted further research on GUIs and talked with the team to decide that Python would be the
		  best language to work with. Narrowed down frameworks to Python and decided on using Tkinter.
		  (3 hrs)
 - 10/20-22: Read through Tkinter documents: https://docs.python.org/3/library/tkinter.html
		     and watched a video on initializing a Tkinter project: https://www.youtube.com/watch?v=YXPyB4XeYLA&t=117s
			 (7 hrs)
 - 11/2: Created GitHub repo and initialized the main GUI. Worked on being able to play a wav file
			(2 hrs)
 - 11/16: Add functionality to access user's file explorer and select a sound file. Created buttons to then play/pause
		this sound file.
			(3 hrs)
 - 11/21: Organize GUI into three different sections: Original Song, Strum Pattern, and Metronome. Added buttons for displaying
		strum patterns, but the actual functionality is a stretch goal for next semester. Added a button to show the Fourier Transform
		graph of the file passed in from the file explorer.
			(3 hrs)
 - 11/28: Added a button to display the notes of the song the user selects. Transformed hard-coded code to be generic and allow for user's
		input to be worked with. Added some aesthetic changes and assisted with metronome testing.
			(5 hrs)
		  Worked on report.
		  	(2 hrs)
- 1/16: Researched and contemplated static display of strums versus dynamic/interactive display
			(2 hrs)
- 1/19: Explored different methods of moving images/creating a motion GUI in Tkinter as well as other frameworks
			(6 hrs)
- 1/22: Researched possible icons to use for strums. Ran into error of images not rendering properly, so I had to manually resize
		them before placing them on the GUI. Syntax for displaying images can be done in many ways in Python Tkinter and is not
		always clear, so I explored with many different methods, including using canvases and labels.
			(8 hrs)
- 1/23: Figured out a way to accurately place the image (upstrums and downstrums) on the GUI by using a label. Still, the images 
		would not render. Found a breakthrough with a single line of code which included assigning the label's image to the loaded
		in image (even though this step seemed to already be done in the initialization of the label before).
			(7 hrs)
- 1/24: Explored methods to move images on the GUI. Experimented with a couple of different methods but realized they did not solve
		our problem as needed.
			(6 hrs)
- 1/25: Decided to research "animations" in Python Tkinter and came across something promising. This made me realize the two important
		lines of code I was missing: time.sleep and root.update. Both of these are essential in creating a delay and re-rendering the screen
		to give the "animation" feel.
			(7 hrs)
- 1/26: Coded and finalized the strum animation display. Talked over with team on using Tkinter or Pygame and tested out both platforms.
		Decided on using Tkinter.
			(7 hrs)
- 1/27: Finalized changes from Pygame to Tkinter and remodeled the strum display animation.
			(6 hrs)
- 2/5: 	Modeled different GUI layouts that could be used for Beta build
			(3 hrs)
- 2/10:	Researched strum detection methods
			(3 hrs)
- 2/13: Worked on strum display algorithm and making it generic for any file inputted
			(6 hrs)
- 2/16:	Finalized strum display algorithm and updated GUI
			(5 hrs)
- 3/7:	Attempted to fix bugs when starting the program on my end
			(3 hrs)
- 3/18: Fixed inability to display strum pattern on my end - had to go into library file and manually change num.integrated
		to int32
			(3 hrs)
- 3/21: Fixing bugs that arise from edge test cases and working on sliding strum display
			(5 hrs)

Kendall
 - 11/1 & 11/2: researched serial communication and made program in 
              and made a program in CircuitPython to be able to 
              read and write to a file. 
	      (7 hrs)
 - 11/15 & 11/16: researched MIDI to find out if notes can easily be read in it 
		(4 hrs)
 - 11/17: researched MIDI to see how to write a MIDI file and if the bpm could
         be found in the file easily. researched CircuitPython libraries to 
	 see if they could be used to read and write MIDI files 
	 (4 hrs)
 - 11/18: researched libraries to calculate the BPM from a song. uninstalled and 
         reinstalled python a ton because it would not work with installing
         new libraries anymore. found the library aubio to calculate the bpm of a song. 
	 worked with different examples of aubio to figure out how to use it. 
	 (5 hrs)
 - 11/19: researched the Pico hardware to find out if a speaker could be used with it.
         bought a speaker for the Pico. Started to send data serially to 
         the Pico. Figured out what format data had to be in for the Pico to understand
	 it. 
	 (5 hrs)
 - 11/20: got a piezo because the Pico does not have a DAC so I could not use a 
         speaker. Wired up the piezo and used an example to see if it worked. 
	 made the commands to work with the Pico to set, start, and stop the 
         piezo. made the metronome class to abstract the serial commands for the Pico away
         from the GUI.
	 (8 hrs)
 - 11/21: updated and tested the metronome class.
	 (1 hr)
 - 11/27: wrote the prior art section of the report. 
	 (1 hr)
 - 11/28: integrated the metronome into the GUI. created a popup window in the GUI to
	 get the port. wrote all the parts of the report that had to do with the 
         metronome and wrote my part of Empirical Evidence. 
	 (6 hrs)
 - 1/15: Researching different GUI frameworks (2 hrs)
 - 1/20: ideating and researching for how the strum pattern should be shown. 
 	(1 hr)
 - 1/21: researched frameworks and researched parts to play MIDI or different audio files. Bought parts. 
 		 added pause, unpause, and restart functionality in UI for audio.  
	(7 hrs)
 - 1/22: coded and debugged pausing and unpausing the metronome. Ideating for UI look to synchronize 
	 metronome to song. Temporarily synched metronome to UI.
	(7 hrs)
 - 1/23: ideate how to show the strum patterns and how they will be used in the metronome. 
	 Implement the strum patterns into the metronome and tested them. Made some minor
	 code fixes.
	 (6 hrs)
 - 1/24: researched showing images and tkinter. found images for application. researched pygame
	and tkinter. started converting GUI to pygame since tkinter seemed to not show images well.
	(6 hrs)
 - 1/25: Converted GUI to pygame. Researched pygame.
	(6 hrs)
 - 1/26: Continued converting GUI to pygame. (4 hrs)
 - 1/27: Finishing touches on both the TKinter and pygame GUI (7 hrs)
 - 2/1: Tried to get the speaker to work with our existing code base (3 hrs)
 - 2/4: Tested the metronome (5 hrs)
 - 2/6: Debugging the pygame GUI because we know that we need a better GUI (3 hrs)
 - 2/8: Keep debugging the pygame GUI because we know that we need a better GUI (3 hrs)
 - 2/13: Researching different methods and examples for strum and chord detection (4 hrs)
 - 2/14: Keep researching different methods for the signal processing (4 hrs)
 - 2/16: Create the strumming pattern algorithm for the GUI and updated
		 the GUI for the metronome (5 hrs)
 - 2/17: Last minute touches on the GUI (2 hrs)
 - 2/20: Bug fixes for metronome and GUI (5 hrs)
 - 2/23: Bug fixes for the GUI (2 hrs)
 - 3/20: Speaker debugging (3 hrs)
 - 3/21: Sliding display ideating and implementing preliminary sliding display (5 hrs)
 - 3/24: Thinking of math and implementing for pixels for sliding display (2 hrs)
 - 3/25: Implementing animation for sliding display that has variable notes (8 hrs)